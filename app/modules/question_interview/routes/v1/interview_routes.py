"""
Question Composer API routes.
"""

import logging
import uuid
from fastapi import APIRouter, Depends, Body
from pydantic import BaseModel, Field

from app.core.base_model import APIResponse
from app.middleware.translation_manager import _

from ...repository.question_interview_repo import InterviewComposerRepo
from ...schemas.interview_request import SubmitInterviewAnswerRequest  # <-- use the correct schema
from app.exceptions.handlers import handle_exceptions

# Setup logging
logger = logging.getLogger(__name__)

# Create router - MUST be named 'route'
route = APIRouter(prefix='/question-composer', tags=['Question Composer'])


class StartSessionRequest(BaseModel):
	cleaned_cv_text: str = Field(..., description="Cleaned CV text for the user (provided by BE, not user)")
	job_description: str = Field(..., description="Job description for the interview")
	previous_questions: list = Field(default_factory=list, description="List of previous questions (can be empty)")
	session_id: str = Field(..., description="Session ID generated by BE")


class AnswerRequest(BaseModel):
	session_id: str = Field(..., description="Session ID")
	cleaned_cv_text: str = Field(..., description="Cleaned CV text for the user")
	job_description: str = Field(..., description="Job description for the interview")
	previous_questions: list = Field(..., description="Full list of previous questions (with answers)")
	answer_text: str = Field(..., description="User's answer to the last question")


def get_interview_composer_repo() -> InterviewComposerRepo:
	return InterviewComposerRepo()


@route.post("/start-session", summary="Start interview with analyzed CV")
@handle_exceptions
async def start_interview_session(
	request: StartSessionRequest,
	repo: InterviewComposerRepo = Depends(get_interview_composer_repo),
) -> APIResponse:
	"""
	Start a question interview session using cleaned CV text, job description, and previous questions.
	All context is provided by BE. No session is stored in memory.
	"""
	result = await repo.generate_question_from_cv_text(
		cleaned_cv_text=request.cleaned_cv_text,
		job_description=request.job_description,
		previous_questions=request.previous_questions,
		session_id=request.session_id,
	)
	filtered_data = {
		"session_id": request.session_id,
		"questions": result.questions,
		"analysis": result.analysis,
		"next_focus_areas": result.next_focus_areas,
	}
	return APIResponse(error_code=0, message=_("success"), data=filtered_data)


@route.post("/answer", summary="Submit answer and receive feedback")
@handle_exceptions
async def submit_answer_and_get_next_question(
	request: AnswerRequest = Body(
		...,
		example={
			"session_id": "your-session-id",
			"cleaned_cv_text": "CV đã làm sạch...",
			"job_description": "JD...",
			"previous_questions": [],
			"answer_text": "My answer to the question"
		}
	),
	repo: InterviewComposerRepo = Depends(get_interview_composer_repo)
) -> APIResponse:
	"""
	Evaluate answer and generate next question. All context is provided by BE.
	"""
	feedback = await repo.evaluate_answer_and_continue(
		cleaned_cv_text=request.cleaned_cv_text,
		job_description=request.job_description,
		previous_questions=request.previous_questions,
		answer_text=request.answer_text,
		session_id=request.session_id,
	)
	return APIResponse(error_code=0, message=_("success"), data=feedback)


logger.info('Question Composer API routes loaded!')
